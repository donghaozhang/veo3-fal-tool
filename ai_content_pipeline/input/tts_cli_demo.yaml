name: "tts_cli_demo"
description: "Practical text-to-speech CLI demonstration and testing"
prompt: "This is a demonstration of our text-to-speech capabilities. The system supports multiple voices with customizable settings for professional audio generation."

# This is a practical demo file showing how to use the existing TTS CLI
# Run this by executing the commands manually or through a script

demo_commands:
  # 1. List available voices
  list_voices:
    description: "Show all available voices with descriptions"
    command: "cd ../text_to_speech && python examples/basic_usage.py --list-voices"
    expected_output: "List of 10 voices with descriptions"
    
  # 2. Basic speech generation
  basic_generation:
    description: "Generate speech with default settings"
    command: "cd ../text_to_speech && python examples/basic_usage.py --text 'This is a demonstration of our text-to-speech capabilities.' --voice rachel --output demo_basic.mp3 --quiet"
    expected_output: "output/demo_basic.mp3"
    
  # 3. CLI wrapper with JSON output (pipeline-ready)
  pipeline_ready:
    description: "Generate speech with JSON output for automation"
    command: "cd ../text_to_speech && python examples/tts_cli_wrapper.py 'The system supports multiple voices with customizable settings.' rachel demo_wrapper.mp3 --json"
    expected_output: "JSON with success status and file path"
    
  # 4. Voice comparison
  voice_comparison:
    description: "Generate same text with different voices"
    commands:
      - "cd ../text_to_speech && python examples/tts_cli_wrapper.py 'Professional audio generation with Rachel voice.' rachel demo_rachel.mp3 --json"
      - "cd ../text_to_speech && python examples/tts_cli_wrapper.py 'Professional audio generation with Drew voice.' drew demo_drew.mp3 --json"
      - "cd ../text_to_speech && python examples/tts_cli_wrapper.py 'Professional audio generation with Bella voice.' bella demo_bella.mp3 --json"
    
  # 5. Custom settings demonstration
  custom_settings:
    description: "Test different speech parameters"
    commands:
      # Slow and stable
      - "cd ../text_to_speech && python examples/basic_usage.py --text 'This is slow and stable speech.' --voice rachel --speed 0.8 --stability 0.9 --output demo_slow_stable.mp3 --quiet"
      # Fast and creative
      - "cd ../text_to_speech && python examples/basic_usage.py --text 'This is fast and creative speech!' --voice bella --speed 1.2 --stability 0.3 --style 0.8 --output demo_fast_creative.mp3 --quiet"
    
  # 6. Voice validation (useful for pipeline integration)
  voice_validation:
    description: "Validate voice names before generation"
    commands:
      - "cd ../text_to_speech && python examples/tts_cli_wrapper.py --validate-voice rachel --json"
      - "cd ../text_to_speech && python examples/tts_cli_wrapper.py --validate-voice invalid_voice --json"

# Test script for automation
test_script: |
  #!/bin/bash
  
  echo "üé§ TTS CLI Demo Test Script"
  echo "=========================="
  
  cd /home/zdhpe/veo3-video-generation/text_to_speech
  
  echo "1. Testing voice listing..."
  python examples/basic_usage.py --list-voices
  
  echo -e "\n2. Testing basic generation..."
  python examples/basic_usage.py --text "This is a demonstration of our text-to-speech capabilities." --voice rachel --output demo_basic.mp3 --quiet
  
  echo -e "\n3. Testing CLI wrapper with JSON..."
  python examples/tts_cli_wrapper.py "The system supports multiple voices with customizable settings." rachel demo_wrapper.mp3 --json
  
  echo -e "\n4. Testing voice validation..."
  python examples/tts_cli_wrapper.py --validate-voice rachel --json
  
  echo -e "\n5. Testing different voices..."
  python examples/tts_cli_wrapper.py "Professional audio with Drew voice." drew demo_drew.mp3 --json
  python examples/tts_cli_wrapper.py "Creative audio with Bella voice." bella demo_bella.mp3 --json
  
  echo -e "\n6. Checking generated files..."
  ls -la output/demo_*.mp3
  
  echo -e "\n‚úÖ TTS CLI Demo Complete!"

# Expected files after running demo
expected_files:
  - "output/demo_basic.mp3"
  - "output/demo_wrapper.mp3"
  - "output/demo_rachel.mp3"
  - "output/demo_drew.mp3"
  - "output/demo_bella.mp3"
  - "output/demo_slow_stable.mp3"
  - "output/demo_fast_creative.mp3"

# Pipeline integration example
pipeline_integration_example: |
  # Example of how to integrate TTS into an automated pipeline
  
  import subprocess
  import json
  
  def generate_speech_for_pipeline(text, voice="rachel", output_file=None):
      """Generate speech using TTS CLI wrapper"""
      cmd = [
          "python", "examples/tts_cli_wrapper.py",
          text, voice, "--json"
      ]
      if output_file:
          cmd.insert(-1, output_file)
      
      result = subprocess.run(cmd, capture_output=True, text=True, 
                            cwd="/home/zdhpe/veo3-video-generation/text_to_speech")
      
      if result.returncode == 0:
          return json.loads(result.stdout)
      else:
          return {"success": false, "error": result.stderr}
  
  # Usage example
  result = generate_speech_for_pipeline(
      "This text will be converted to speech for the AI pipeline.",
      voice="rachel",
      output_file="pipeline_output.mp3"
  )
  
  if result["success"]:
      print(f"‚úÖ Speech generated: {result['output_file']}")
  else:
      print(f"‚ùå Generation failed: {result['error']}")

# Demo metadata
demo_info:
  voices_available: 10
  supported_formats: ["mp3"]
  speed_range: "0.7 - 1.2"
  stability_range: "0.0 - 1.0"
  style_range: "0.0 - 1.0"
  cli_interfaces: 2  # basic_usage.py and tts_cli_wrapper.py
  json_support: true
  pipeline_ready: true