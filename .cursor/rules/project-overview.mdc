---
description: 
globs: 
alwaysApply: true
---
# AI Content Generation Project Overview

This project provides Python utilities for generating both videos and images using multiple AI platforms:

## Video Generation
1. **Google Veo API** on Vertex AI (higher resolution, automated setup with permission fixes)
2. **FAL AI Dual Models** (simpler setup, production ready)
   - **MiniMax Hailuo-02** (768p, prompt optimizer)
   - **Kling Video 2.1** (high-quality, CFG scale, negative prompts)

## Text-to-Image Generation
3. **FAL AI Quad Models** (consolidated test structure, MCP server support)
   - **Imagen4** (Google's high-quality model)
   - **Seedream** (Artistic and creative generation)
   - **FLUX Schnell** (Ultra-fast generation)
   - **FLUX Dev** (Balanced speed and quality)

## Main Components

### Google Veo Implementation
Located in [veo3_video_generation/](mdc:veo3_video_generation) directory with automated setup and permission fixes.

**Key Components:**
- [veo_video_generation.py](mdc:veo3_video_generation/veo_video_generation.py) - Main Google Veo video generation functions
- [fix_permissions.py](mdc:veo3_video_generation/fix_permissions.py) - **Automated permission fix tool** (fixes 90% of setup issues)
- [demo.py](mdc:veo3_video_generation/demo.py) - Interactive demonstration with Veo 2.0/3.0 selection
- [test_veo.py](mdc:veo3_video_generation/test_veo.py) - Comprehensive test suite with command-line options

**Key Functions:**
- `generate_video_from_text()` - Creates videos from text prompts
- `generate_video_from_image()` - Creates videos from images with optional text guidance
- `generate_video_from_local_image()` - Handles local image uploads to GCS
- `generate_video_with_veo3_preview()` - Uses the newer Veo 3.0 model
- `download_gcs_file()` - Downloads generated videos from Google Cloud Storage

**Quick Setup**: Run `python fix_permissions.py` to automatically configure Google Cloud permissions

### FAL AI Video Generation (Dual-Model)
Located in [fal_video_generation/](mdc:fal_video_generation) directory with simplified API-based approach supporting two models and cost-conscious testing.

**Key Components:**
- [fal_video_generator.py](mdc:fal_video_generation/fal_video_generator.py) - Main FALVideoGenerator class with full endpoint names
- [demo.py](mdc:fal_video_generation/demo.py) - Cost-conscious interactive demo with confirmation prompts
- [test_fal_ai.py](mdc:fal_video_generation/test_fal_ai.py) - Cost-conscious test suite with model-specific flags
- [test_api_only.py](mdc:fal_video_generation/test_api_only.py) - **FREE API connection test** (no video generation)
- [README.md](mdc:fal_video_generation/README.md) - Complete FAL AI dual-model documentation
- [COST_CONSCIOUS_TESTING.md](mdc:fal_video_generation/COST_CONSCIOUS_TESTING.md) - Cost-conscious testing guide

### FAL AI Text-to-Image Generation (Quad-Model)
Located in [fal_text_to_image/](mdc:fal_text_to_image) directory with consolidated test structure and MCP server support.

**Key Components:**
- [fal_text_to_image_generator.py](mdc:fal_text_to_image/fal_text_to_image_generator.py) - Main FALTextToImageGenerator class
- [mcp_server.py](mdc:fal_text_to_image/mcp_server.py) - Model Context Protocol server for AI assistant integration
- [demo.py](mdc:fal_text_to_image/demo.py) - Cost-conscious interactive demo
- **Consolidated Test Suite:**
  - [test_setup.py](mdc:fal_text_to_image/test_setup.py) - **FREE environment and API validation**
  - [test_mcp.py](mdc:fal_text_to_image/test_mcp.py) - **FREE MCP server functionality tests**
  - [test_generation.py](mdc:fal_text_to_image/test_generation.py) - **PAID image generation tests** (includes `--dragon` flag)
  - [test_cursor_mcp.py](mdc:fal_text_to_image/test_cursor_mcp.py) - Cursor-compatible MCP testing
- [README.md](mdc:fal_text_to_image/README.md) - Complete FAL AI text-to-image documentation

**Supported Video Models:**
- **MiniMax Hailuo-02**: `fal-ai/minimax/hailuo-02/standard/image-to-video`
  - Resolution: 768p
  - Duration: 6-10 seconds
  - Features: Prompt optimizer
- **Kling Video 2.1**: `fal-ai/kling-video/v2.1/standard/image-to-video`
  - Resolution: High-quality
  - Duration: 5-10 seconds
  - Features: CFG scale, negative prompts

**Supported Text-to-Image Models:**
- **Imagen4**: `fal-ai/google/imagen4/text-to-image` - Photorealistic, ~6-8s, $0.015/image
- **Seedream**: `fal-ai/seedream/text-to-image` - Artistic style, ~9-15s, $0.015/image
- **FLUX Schnell**: `fal-ai/flux/schnell` - Ultra-fast, ~1-2s, $0.015/image
- **FLUX Dev**: `fal-ai/flux/dev` - Balanced quality, ~2-3s, $0.015/image

## Project Structure
```
veo3/
├── README.md                        # Multi-platform project overview
├── requirements.txt                 # Main dependencies
├── .env                            # Legacy configuration file
├── archive/                         # Legacy tools and older versions
├── veo3_video_generation/           # Google Veo implementation
│   ├── veo_video_generation.py     # Main Google Veo functions
│   ├── fix_permissions.py          # 🔧 Automated permission fix tool
│   ├── demo.py                     # Interactive Veo demo (2.0/3.0)
│   ├── test_veo.py                 # Comprehensive test suite
│   ├── README.md                   # Veo-specific documentation
│   ├── requirements.txt            # Veo dependencies
│   ├── .env                        # Veo configuration
│   ├── images/                     # Input images (smiling_woman.jpg, bet.png)
│   └── result_folder/              # Veo output videos
├── fal_video_generation/            # FAL AI dual-model video implementation
│   ├── fal_video_generator.py       # FAL AI video generator class (dual-model)
│   ├── demo.py                      # Cost-conscious interactive demo
│   ├── test_fal_ai.py              # Cost-conscious test suite (both models)
│   ├── test_api_only.py            # FREE API connection test
│   ├── README.md                    # FAL AI dual-model documentation
│   ├── COST_CONSCIOUS_TESTING.md   # Cost-conscious testing guide
│   ├── requirements.txt             # FAL AI dependencies
│   ├── .env                         # FAL AI configuration
│   ├── output/                      # FAL AI generated videos
│   └── test_output/                 # Test-generated videos
└── fal_text_to_image/               # FAL AI quad-model text-to-image implementation
    ├── fal_text_to_image_generator.py # FAL AI text-to-image generator class
    ├── mcp_server.py                # Model Context Protocol server
    ├── demo.py                      # Cost-conscious interactive demo
    ├── test_setup.py               # FREE environment and API validation
    ├── test_mcp.py                 # FREE MCP server functionality tests
    ├── test_generation.py          # PAID image generation tests (includes --dragon)
    ├── test_cursor_mcp.py          # Cursor-compatible MCP testing
    ├── update_cursor_mcp.py        # Cursor configuration helper
    ├── README.md                    # FAL AI text-to-image documentation
    ├── requirements.txt             # FAL AI dependencies
    ├── .env                         # FAL AI configuration
    ├── output/                      # Generated images
    └── test_output/                 # Test-generated images
```

## Configuration Requirements

### Google Veo Setup
- **Quick Setup**: Run `python fix_permissions.py` (fixes 90% of issues automatically)
- Google Cloud Project ID (configured in [veo3_video_generation/.env](mdc:veo3_video_generation/.env))
- Google Cloud Storage bucket for output
- Vertex AI API enabled (automated by fix script)
- gcloud CLI authentication

### FAL AI Setup (Simpler)
- FAL AI API key in [fal_video_generation/.env](mdc:fal_video_generation/.env)
- Python dependencies: fal-client, requests, python-dotenv
- Single API key works for both Hailuo and Kling models

## Model Selection Guidelines

### Choose MiniMax Hailuo-02 when:
- You need reliable 768p video generation
- You want AI-powered prompt optimization
- You prefer the established model with proven results

### Choose Kling Video 2.1 when:
- You need high-quality video output
- You want fine control with CFG scale parameters
- You need negative prompt capabilities for better quality control

### Choose Google Veo when:
- You need 1080p resolution
- You want longer videos
- You already use Google Cloud infrastructure

## Usage Recommendations

### Video Generation
- **Testing Setup**: Use `python test_api_only.py` for FREE API validation
- **Prototyping**: Start with FAL AI single model testing (`--hailuo` or `--kling`) to avoid unnecessary costs
- **Production**: Use FAL AI for API-based deployments, Google Veo for high-resolution needs
- **Comparison**: Use cost-conscious comparison tools - remember comparison tests generate 2 videos (~$0.04-0.10)

### Text-to-Image Generation
- **Testing Setup**: Use `python test_setup.py` for FREE environment validation
- **MCP Testing**: Use `python test_mcp.py` for FREE MCP server functionality testing
- **Prototyping**: Start with single model testing (`python test_generation.py --flux-schnell`) to avoid unnecessary costs
- **Dragon Generation**: Use `python test_generation.py --dragon` for dragon image testing (~$0.015)
- **Production**: Use batch generation for efficiency (`python test_generation.py --batch 1,3`)
- **Comparison**: Use comparison tools carefully - remember comparison tests generate 4 images (~$0.060)

## ⚠️ CRITICAL: Cost Protection Rules
**See [cost-protection.mdc](mdc:.cursor/rules/cost-protection.mdc) for complete cost protection guidelines**

### Video Generation
- **NEVER run video generation tests without explicit user confirmation**
- **Always start with FREE tests** (`test_api_only.py`) to validate setup
- **Use model-specific flags** (`--hailuo`, `--kling`) to test individual models
- **Avoid comparison tests** during development unless specifically needed
- **Monitor costs** - each video generation costs ~$0.02-0.05

### Text-to-Image Generation
- **NEVER run image generation tests without explicit user confirmation**
- **Always start with FREE tests** (`test_setup.py`, `test_mcp.py`) to validate setup
- **Use model-specific flags** (`--imagen4`, `--seedream`, `--flux-schnell`, `--flux-dev`) to test individual models
- **Use dragon generation** (`--dragon`) for testing specific scenarios
- **Avoid comparison tests** (`--compare`) during development unless specifically needed
- **Monitor costs** - each image generation costs ~$0.015









