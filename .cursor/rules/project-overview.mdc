---
description: 
globs: 
alwaysApply: true
---
# Video Generation Project Overview

This project provides Python utilities for generating videos using two different AI platforms:
1. **Google Veo API** on Vertex AI (higher resolution, automated setup with permission fixes)
2. **FAL AI Dual Models** (simpler setup, production ready)
   - **MiniMax Hailuo-02** (768p, prompt optimizer)
   - **Kling Video 2.1** (high-quality, CFG scale, negative prompts)

## Main Components

### Google Veo Implementation
Located in [veo3_video_generation/](mdc:veo3_video_generation) directory with automated setup and permission fixes.

**Key Components:**
- [veo_video_generation.py](mdc:veo3_video_generation/veo_video_generation.py) - Main Google Veo video generation functions
- [fix_permissions.py](mdc:veo3_video_generation/fix_permissions.py) - **Automated permission fix tool** (fixes 90% of setup issues)
- [demo.py](mdc:veo3_video_generation/demo.py) - Interactive demonstration with Veo 2.0/3.0 selection
- [test_veo.py](mdc:veo3_video_generation/test_veo.py) - Comprehensive test suite with command-line options

**Key Functions:**
- `generate_video_from_text()` - Creates videos from text prompts
- `generate_video_from_image()` - Creates videos from images with optional text guidance
- `generate_video_from_local_image()` - Handles local image uploads to GCS
- `generate_video_with_veo3_preview()` - Uses the newer Veo 3.0 model
- `download_gcs_file()` - Downloads generated videos from Google Cloud Storage

**Quick Setup**: Run `python fix_permissions.py` to automatically configure Google Cloud permissions

### FAL AI Dual-Model Implementation
Located in [fal_video_generation/](mdc:fal_video_generation) directory with simplified API-based approach supporting two models and cost-conscious testing.

**Key Components:**
- [fal_video_generator.py](mdc:fal_video_generation/fal_video_generator.py) - Main FALVideoGenerator class with dual-model support
- [demo.py](mdc:fal_video_generation/demo.py) - Cost-conscious interactive demo with confirmation prompts
- [test_fal_ai.py](mdc:fal_video_generation/test_fal_ai.py) - Cost-conscious test suite with model-specific options
- [test_api_only.py](mdc:fal_video_generation/test_api_only.py) - **FREE API connection test** (no video generation)
- [README.md](mdc:fal_video_generation/README.md) - Complete FAL AI dual-model documentation
- [COST_CONSCIOUS_TESTING.md](mdc:fal_video_generation/COST_CONSCIOUS_TESTING.md) - Cost-conscious testing guide

**Supported Models:**
- **MiniMax Hailuo-02**: `fal-ai/minimax/hailuo-02/standard/image-to-video`
  - Resolution: 768p
  - Duration: 6-10 seconds
  - Features: Prompt optimizer
- **Kling Video 2.1**: `fal-ai/kling-video/v2.1/standard/image-to-video`
  - Resolution: High-quality
  - Duration: 5-10 seconds
  - Features: CFG scale, negative prompts

## Project Structure
```
veo3/
├── README.md                        # Multi-platform project overview
├── requirements.txt                 # Main dependencies
├── .env                            # Legacy configuration file
├── archive/                         # Legacy tools and older versions
├── veo3_video_generation/           # Google Veo implementation
│   ├── veo_video_generation.py     # Main Google Veo functions
│   ├── fix_permissions.py          # 🔧 Automated permission fix tool
│   ├── demo.py                     # Interactive Veo demo (2.0/3.0)
│   ├── test_veo.py                 # Comprehensive test suite
│   ├── README.md                   # Veo-specific documentation
│   ├── requirements.txt            # Veo dependencies
│   ├── .env                        # Veo configuration
│   ├── images/                     # Input images (smiling_woman.jpg, bet.png)
│   └── result_folder/              # Veo output videos
└── fal_video_generation/            # FAL AI dual-model implementation
    ├── fal_video_generator.py       # FAL AI video generator class (dual-model)
    ├── demo.py                      # Cost-conscious interactive demo
    ├── test_fal_ai.py              # Cost-conscious test suite (both models)
    ├── test_api_only.py            # FREE API connection test
    ├── README.md                    # FAL AI dual-model documentation
    ├── COST_CONSCIOUS_TESTING.md   # Cost-conscious testing guide
    ├── requirements.txt             # FAL AI dependencies
    ├── .env                         # FAL AI configuration
    ├── output/                      # FAL AI generated videos
    └── test_output/                 # Test-generated videos
```

## Configuration Requirements

### Google Veo Setup
- **Quick Setup**: Run `python fix_permissions.py` (fixes 90% of issues automatically)
- Google Cloud Project ID (configured in [veo3_video_generation/.env](mdc:veo3_video_generation/.env))
- Google Cloud Storage bucket for output
- Vertex AI API enabled (automated by fix script)
- gcloud CLI authentication

### FAL AI Setup (Simpler)
- FAL AI API key in [fal_video_generation/.env](mdc:fal_video_generation/.env)
- Python dependencies: fal-client, requests, python-dotenv
- Single API key works for both Hailuo and Kling models

## Model Selection Guidelines

### Choose MiniMax Hailuo-02 when:
- You need reliable 768p video generation
- You want AI-powered prompt optimization
- You prefer the established model with proven results

### Choose Kling Video 2.1 when:
- You need high-quality video output
- You want fine control with CFG scale parameters
- You need negative prompt capabilities for better quality control

### Choose Google Veo when:
- You need 1080p resolution
- You want longer videos
- You already use Google Cloud infrastructure

## Usage Recommendations
- **Testing Setup**: Use `python test_api_only.py` for FREE API validation
- **Prototyping**: Start with FAL AI single model testing (`--hailuo` or `--kling`) to avoid unnecessary costs
- **Production**: Use FAL AI for API-based deployments, Google Veo for high-resolution needs
- **Comparison**: Use cost-conscious comparison tools - remember comparison tests generate 2 videos (~$0.04-0.10)

## ⚠️ CRITICAL: Cost Protection Rules
**See [cost-protection.mdc](mdc:.cursor/rules/cost-protection.mdc) for complete cost protection guidelines**

- **NEVER run video generation tests without explicit user confirmation**
- **Always start with FREE tests** (`test_api_only.py`) to validate setup
- **Use model-specific flags** (`--hailuo`, `--kling`) to test individual models
- **Avoid comparison tests** during development unless specifically needed
- **Monitor costs** - each video generation costs ~$0.02-0.05









