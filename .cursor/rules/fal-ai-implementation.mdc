---
description: 
globs: 
alwaysApply: false
---
# FAL AI Multi-Model Implementation

This document covers the FAL AI implementation supporting video generation, avatar generation, and text-to-image generation:

## Video Generation (Dual-Model Support)
- **MiniMax Hailuo-02**: Reliable 768p generation with prompt optimization
- **Kling Video 2.1**: High-quality generation with CFG scale and negative prompts

## Avatar Generation (Triple-Mode Support)
- **Text-to-Speech Avatar**: 20 voice options with natural speech conversion using official FAL AI examples
- **Audio-to-Avatar**: Custom audio files for lip-sync animation with natural expressions
- **Multi-Audio Conversation**: Two-person conversations with sequential speaking and seamless transitions

## Text-to-Image Generation (Quad-Model Support)
- **Imagen4**: Google's high-quality model with excellent realism
- **Seedream**: Artistic and creative generation with unique style
- **FLUX Schnell**: Ultra-fast generation (1-2 seconds)
- **FLUX Dev**: Balanced speed and quality

All modules provide production-ready API access with cost-conscious testing frameworks and official example compliance.

## Core Components

### FALVideoGenerator Class
Located in [fal_video_generation/fal_video_generator.py](mdc:fal_video_generation/fal_video_generator.py)

**Dual-Model Support:**
- Single class supports both models
- Model selection via `model` parameter
- Model-specific methods for optimized usage
- Backward compatibility maintained

**Universal Methods:**
```python
# Generate video with model selection
generator.generate_video_from_image(
    prompt="Your description",
    image_url="https://example.com/image.jpg",
    duration="6",  # "5" or "6" or "10" seconds
    model="hailuo",  # "hailuo" or "kling"
    output_folder="output"
)

# Generate video from local image with model selection
generator.generate_video_from_local_image(
    prompt="Your description", 
    image_path="path/to/image.jpg",
    duration="6",
    model="kling"  # Choose model
)
```

### FALAvatarGenerator Class
Located in [fal_avatar_generation/fal_avatar_generator.py](mdc:fal_avatar_generation/fal_avatar_generator.py)

**Triple-Mode Support:**
- Single class supports all three avatar generation modes
- Mode selection via different methods
- Official FAL AI example compliance with defaults
- Cost-conscious design with confirmation prompts

**Universal Methods:**
```python
# Text-to-Speech Avatar (20 voice options)
result = generator.generate_avatar_video(
    image_url="path/to/image.jpg",
    text_input="Hello! This is my avatar speaking.",
    voice="Bill",  # Default: Bill (from official example)
    prompt="An elderly man with a white beard and headphones records audio with a microphone. He appears engaged and expressive, suggesting a podcast or voiceover.",
    num_frames=136,  # Official example default
    seed=42,  # Official example default
    turbo=True,
    output_path="output/avatar_video.mp4"
)

# Audio-to-Avatar (custom audio files)
result = generator.generate_avatar_from_audio(
    image_url="path/to/image.jpg",
    audio_url="path/to/audio.mp3",
    prompt="A person speaking naturally with clear lip-sync and natural expressions.",
    num_frames=145,  # Default for audio mode
    output_path="output/avatar_video.mp4"
)

# Multi-Audio Conversation (two-person dialogue)
result = generator.generate_multi_avatar_conversation(
    image_url="path/to/image.jpg",
    first_audio_url="path/to/person1_audio.mp3",
    second_audio_url="path/to/person2_audio.mp3",
    prompt="Two people engaged in a natural conversation, speaking in sequence with clear lip-sync and natural expressions.",
    num_frames=181,  # Default for multi-audio mode
    output_path="output/conversation_video.mp4"
)

# Official FAL AI Example (exact documentation reproduction)
result = generator.generate_official_example(
    output_path="output/official_example.mp4"
)
```

**Voice Options (20 Available):**
- **Male Voices**: Roger, Charlie, George, Callum, River, Liam, Will, Eric, Chris, Brian, Daniel, Bill
- **Female Voices**: Aria, Sarah, Laura, Charlotte, Alice, Matilda, Jessica, Lily
- **Official Default**: Bill (from FAL AI documentation examples)

**Key Features:**
- Natural lip-sync technology with automatic mouth movement synchronization
- Natural expressions with AI-generated facial expressions and movements
- Conversation support for multi-person dialogue with seamless transitions
- Customizable parameters including frame count, voice selection, and prompts
- Turbo mode for faster generation with optimized processing
- Local & remote support for both local files and URLs for images/audio
- Cost-conscious testing with separate FREE and PAID test suites

### FALTextToImageGenerator Class
Located in [fal_text_to_image/fal_text_to_image_generator.py](mdc:fal_text_to_image/fal_text_to_image_generator.py)

**Quad-Model Support:**
- Single class supports all four models
- Model selection via `model` parameter
- Batch generation with multiple models
- Cost-conscious design with confirmation prompts

**Universal Methods:**
```python
# Generate image with model selection
generator.generate_image(
    prompt="A beautiful landscape",
    model="imagen4",  # "imagen4", "seedream", "flux_schnell", "flux_dev"
    output_folder="output"
)

# Batch generation with multiple models
results = generator.batch_generate(
    prompt="A magical forest",
    models=["imagen4", "flux_schnell"],  # Select specific models
    auto_confirm=False,  # Prompt for cost confirmation
    download_images=True  # Download to local folder
)
```

**Model-Specific Methods:**
```python
# Imagen4 optimized method
generator.generate_image_with_imagen4(
    prompt="Photorealistic portrait",
    negative_prompt="blur, distortion",
    num_inference_steps=50
)

# FLUX Schnell for speed
generator.generate_image_with_flux_schnell(
    prompt="Quick artistic sketch",
    num_inference_steps=4
)
```

**Batch Processing Features:**
- Multi-model batch generation
- Cost estimation and confirmation prompts
- Performance tracking and timing
- Detailed success/failure reporting
- Auto-download option for generated images
- Progress tracking with numbered steps

### Cost-Conscious Testing Framework

**Video Generation Testing:**
Located in [fal_video_generation/test_fal_ai.py](mdc:fal_video_generation/test_fal_ai.py)

**FREE Testing Commands (No Cost):**
```bash
# API connection test only - completely FREE
python test_api_only.py

# Basic setup and API connection test - FREE
python test_fal_ai.py
```

**Paid Testing Commands (Generates Real Videos):**
```bash
# Test single model - ~$0.02-0.05 per test
python test_fal_ai.py --hailuo      # Test Hailuo model only
python test_fal_ai.py --kling       # Test Kling model only
python test_fal_ai.py --quick       # Same as --hailuo

# Full test with detailed output - ~$0.02-0.05
python test_fal_ai.py --full

# Compare both models - ~$0.04-0.10 (EXPENSIVE!)
python test_fal_ai.py --compare     # Generates 2 videos
```

**Avatar Generation Testing:**
Located in [fal_avatar_generation/test_generation.py](mdc:fal_avatar_generation/test_generation.py)

**FREE Testing Commands (No Cost):**
```bash
# Environment and API validation - completely FREE
python test_setup.py

# Basic setup and dependency validation - FREE
python test_generation.py
```

**Paid Testing Commands (Generates Real Avatar Videos):**
```bash
# Official FAL AI example test - ~$0.03-0.05 per test
python test_official_example.py

# Test specific voice - ~$0.03-0.05 per test
python test_generation.py --voice Bill       # Test Bill voice
python test_generation.py --voice Sarah      # Test Sarah voice

# Test audio-to-avatar mode - ~$0.03-0.05 per test
python test_generation.py --audio            # Test custom audio files

# Test multi-audio conversation mode - ~$0.03-0.05 per test
python test_generation.py --multi            # Test two-person conversation

# Quick test with minimal frames (cheaper) - ~$0.025 per test
python test_generation.py --quick

# Compare multiple voices - ~$0.09-0.15 (EXPENSIVE!)
python test_generation.py --compare          # Generates 3 avatar videos

# Test custom scenarios - ~$0.06-0.10
python test_generation.py --scenarios        # Multiple test scenarios
```

**Text-to-Image Testing:**
Located in [fal_text_to_image/test_generation.py](mdc:fal_text_to_image/test_generation.py)

**FREE Testing Commands (No Cost):**
```bash
# API connection test only - completely FREE
python test_setup.py

# Basic setup and API connection test - FREE
python test_generation.py
```

**Paid Testing Commands (Generates Real Images):**
```bash
# Test single model - ~$0.015 per test
python test_generation.py --imagen4    # Test Imagen4 only
python test_generation.py --seedream   # Test Seedream only
python test_generation.py --flux_schnell  # Test FLUX Schnell only
python test_generation.py --flux_dev   # Test FLUX Dev only

# Batch test with selected models - cost varies by model count
python test_generation.py --batch 1,3  # Test imagen4 + flux_schnell
python test_generation.py --batch 2,4  # Test seedream + flux_dev

# Full test with all models - ~$0.060 (EXPENSIVE!)
python test_generation.py --all        # Generates 4 images
```

**Cost-Conscious Features:**
- Cost warnings displayed prominently
- Confirmation prompts before paid operations
- Model-specific testing to avoid unnecessary costs
- Clear cost estimates for each operation
- Batch testing with selective model combinations

### Interactive Demos

**Video Generation Demo:**
Located in [fal_video_generation/demo.py](mdc:fal_video_generation/demo.py)
- Cost warnings and confirmation prompts
- Model selection menu with cost estimates
- Side-by-side model comparison (with expensive operation warning)

**Avatar Generation Demo:**
Located in [fal_avatar_generation/demo.py](mdc:fal_avatar_generation/demo.py)
- Interactive mode selection (Text-to-Speech, Audio-to-Avatar, Multi-Audio Conversation)
- Voice selection with official example highlighting (Bill voice emphasized)
- Cost estimation and confirmation prompts
- Support for custom images, text input, and audio files
- Official example option for quick testing

**Text-to-Image Demo:**
Located in [fal_text_to_image/demo.py](mdc:fal_text_to_image/demo.py)
- Interactive model selection
- Batch generation with model picker
- Cost estimation and confirmation
- Detailed results display with timing
- Support for negative prompts and custom parameters

## Direct Python API Usage

### FAL AI Avatar Generator
Direct Python API for avatar video generation with triple-mode support and cost-conscious design.

**Core Functions:**
1. **`generate_avatar_video()`** - Generate text-to-speech avatar with 20 voice options
2. **`generate_avatar_from_audio()`** - Generate avatar from custom audio files
3. **`generate_multi_avatar_conversation()`** - Generate two-person conversation videos
4. **`generate_official_example()`** - Generate using exact FAL AI documentation examples
5. **`get_available_voices()`** - Get list of all 20 available voices
6. **`test_connection()`** - Test API connectivity without generating content

**Key Features:**
- Cost-conscious design with cost warnings and confirmation prompts
- Rich response formatting with metadata including generation time and parameters
- Support for all three avatar generation modes
- Official example compliance with FAL AI documentation defaults
- Natural lip-sync and expression generation
- Local and remote file support for images and audio
- Error handling and validation
- Local video downloading and management

### FAL AI Text-to-Image Generator
Direct Python API for text-to-image generation with multiple models and cost-conscious design.

**Core Functions:**
1. **`generate_image()`** - Generate single image with specified model
2. **`batch_generate()`** - Generate images with multiple models
3. **`get_model_info()`** - Get available models and specifications
4. **`download_image()`** - Download generated image to local storage
5. **`compare_models()`** - Compare output across multiple models

**Key Features:**
- Cost-conscious design with cost warnings
- Rich response formatting with metadata
- Support for all four models (imagen4, seedream, flux_schnell, flux_dev)
- Batch processing capabilities
- Error handling and validation
- Local image downloading and management

**Installation and Setup:**
```bash
# Install core dependencies
pip install fal-client requests python-dotenv

# Set up environment
echo "FAL_KEY=your-fal-ai-api-key-here" > .env
```

## Model Specifications

### Video Generation Models

**MiniMax Hailuo-02:**
- **Endpoint**: `fal-ai/minimax/hailuo-02/standard/image-to-video`
- **Resolution**: 768p
- **Duration**: 6 or 10 seconds
- **Speed**: ~15-25 seconds
- **Cost**: ~$0.02-0.05 per video
- **Key Features**: Prompt optimizer, reliable results

**Kling Video 2.1:**
- **Endpoint**: `fal-ai/kling-video/v2.1/standard/image-to-video`
- **Resolution**: High quality
- **Duration**: 5 or 10 seconds
- **Speed**: ~20-30 seconds
- **Cost**: ~$0.02-0.05 per video
- **Key Features**: CFG scale, negative prompts, artistic control

### Avatar Generation Models

**FAL AI Avatar Single-Text:**
- **Endpoint**: `fal-ai/ai-avatar/single-text`
- **Resolution**: Variable (depends on input image)
- **Duration**: Based on text length and frame count (81-129 frames)
- **Speed**: ~10-20 seconds
- **Cost**: ~$0.02-0.05 per avatar video (1.25x multiplier for >81 frames)
- **Key Features**: 20 voice options, text-to-speech conversion, natural lip-sync
- **Official Example**: Bill voice with podcast-style prompt

**FAL AI Avatar Audio:**
- **Endpoint**: `fal-ai/ai-avatar`
- **Resolution**: Variable (depends on input image)
- **Duration**: Based on audio length and frame count (81-129 frames)
- **Speed**: ~10-20 seconds
- **Cost**: ~$0.02-0.05 per avatar video (1.25x multiplier for >81 frames)
- **Key Features**: Custom audio lip-sync, natural expressions, supports MP3/WAV/other formats

**FAL AI Avatar Multi:**
- **Endpoint**: `fal-ai/ai-avatar/multi`
- **Resolution**: Variable (depends on input image)
- **Duration**: Based on combined audio length and frame count (81-129 frames)
- **Speed**: ~15-25 seconds
- **Cost**: ~$0.02-0.05 per conversation video (1.25x multiplier for >81 frames)
- **Key Features**: Two-person conversations, sequential speaking, seamless transitions

### Text-to-Image Models

**Imagen4:**
- **Endpoint**: `fal-ai/google/imagen4/text-to-image`
- **Resolution**: High quality (1024x1024 default)
- **Speed**: ~6-8 seconds
- **Cost**: ~$0.015 per image
- **Key Features**: Photorealistic, excellent for portraits and professional images

**Seedream:**
- **Endpoint**: `fal-ai/seedream/text-to-image`
- **Resolution**: High quality (1024x1024 default)
- **Speed**: ~9-15 seconds
- **Cost**: ~$0.015 per image
- **Key Features**: Artistic style, creative generation, unique aesthetics

**FLUX Schnell:**
- **Endpoint**: `fal-ai/flux/schnell`
- **Resolution**: High quality (1024x1024 default)
- **Speed**: ~1-2 seconds
- **Cost**: ~$0.015 per image
- **Key Features**: Ultra-fast generation, good for iterations

**FLUX Dev:**
- **Endpoint**: `fal-ai/flux/dev`
- **Resolution**: High quality (1024x1024 default)
- **Speed**: ~2-3 seconds
- **Cost**: ~$0.015 per image
- **Key Features**: Balanced speed and quality, good for production

### Supported Formats
- **Input**: Text prompts, negative prompts (text-to-image), images + prompts (video/avatar generation), audio files (avatar generation)
- **Output**: JPEG, PNG, WebP (images), MP4 (videos/avatars)

## Usage Patterns

### Model Selection Strategy

**For Video Generation:**
```python
# For general use, reliable results
result = generator.generate_video_with_hailuo(
    prompt="A beautiful landscape with moving clouds",
    image_url="https://example.com/image.jpg",
    duration="6",
    prompt_optimizer=True
)

# For high-quality, artistic results
result = generator.generate_video_with_kling(
    prompt="A cinematic landscape with dramatic lighting",
    image_url="https://example.com/image.jpg",
    duration="5",
    cfg_scale=0.7,
    negative_prompt="blur, distort, low quality, artifacts"
)
```

**For Avatar Generation:**
```python
# For text-to-speech avatars (recommended: use official example)
result = generator.generate_avatar_video(
    image_url="https://v3.fal.media/files/panda/HuM21CXMf0q7OO2zbvwhV_c4533aada79a495b90e50e32dc9b83a8.png",
    text_input="Spend more time with people who make you feel alive, and less with things that drain your soul.",
    voice="Bill",  # Official example voice
    prompt="An elderly man with a white beard and headphones records audio with a microphone. He appears engaged and expressive, suggesting a podcast or voiceover.",
    num_frames=136,  # Official example frames
    seed=42,  # Official example seed
    turbo=True
)

# For custom audio lip-sync
result = generator.generate_avatar_from_audio(
    image_url="path/to/your/image.jpg",
    audio_url="path/to/your/audio.mp3",
    prompt="A person speaking naturally with clear lip-sync and natural expressions.",
    num_frames=145
)

# For multi-person conversations
result = generator.generate_multi_avatar_conversation(
    image_url="path/to/your/image.jpg",
    first_audio_url="path/to/person1_audio.mp3",
    second_audio_url="path/to/person2_audio.mp3",
    prompt="Two people engaged in a natural conversation, speaking in sequence with clear lip-sync and natural expressions.",
    num_frames=181
)
```

**For Text-to-Image Generation:**
```python
# For photorealistic images
result = generator.generate_image_with_imagen4(
    prompt="A professional headshot photo",
    negative_prompt="blur, distortion, artifacts"
)

# For creative/artistic images
result = generator.generate_image_with_seedream(
    prompt="An abstract digital art piece",
    style="artistic"
)

# For fast iterations
result = generator.generate_image_with_flux_schnell(
    prompt="A quick concept sketch",
    num_inference_steps=4
)

# For production quality
result = generator.generate_image_with_flux_dev(
    prompt="A detailed product visualization",
    num_inference_steps=50
)
```

### Batch Processing
```python
# Generate with multiple models for comparison
results = generator.batch_generate(
    prompt="A futuristic city skyline",
    models=["imagen4", "flux_dev"],  # Select best models
    auto_confirm=False,  # Ask for cost confirmation
    download_images=True  # Save locally
)

# Process results
for result in results:
    print(f"Model: {result['model']}")
    print(f"Success: {result['success']}")
    print(f"Time: {result['generation_time']:.2f}s")
    if result['success']:
        print(f"Image URL: {result['image_url']}")
        print(f"Local path: {result['local_path']}")
```

### Error Handling
All implementations include comprehensive error handling:
- API key validation for all endpoints
- Model-specific parameter validation
- Network error recovery
- File upload/download failures
- API response validation
- Cost estimation and confirmation

### Output Structure

**Video Generation:**
```python
{
    'video': {
        'url': 'https://v3.fal.media/files/...',
        'file_name': 'output.mp4',
        'file_size': 2816883
    },
    'duration': '6',  # or '5' for Kling
    'model': 'hailuo',  # or 'kling'
    'local_path': 'output/video.mp4'
}
```

**Avatar Generation:**
```python
{
    'video': {
        'url': 'https://v3.fal.media/files/...',
        'file_name': 'output.mp4',
        'file_size': 2816883
    },
    'generation_time': 15.42,
    'parameters': {
        'image_url': '...',
        'text_input': '...',  # or audio_url for audio mode
        'voice': 'Bill',      # text mode only
        'prompt': '...',
        'num_frames': 136,
        'seed': 42,
        'turbo': True
    },
    'local_path': 'output/avatar_video.mp4'
}
```

**Text-to-Image Generation:**
```python
{
    'image': {
        'url': 'https://v3.fal.media/files/...',
        'file_name': 'output.png',
        'file_size': 1024768
    },
    'model': 'imagen4',  # or other model
    'local_path': 'output/image.png',
    'generation_time': 6.42,
    'cost_estimate': 0.015
}
```

**Batch Generation:**
```python
{
    'results': [
        {'model': 'imagen4', 'success': True, 'image_url': '...', 'generation_time': 6.42},
        {'model': 'flux_dev', 'success': True, 'image_url': '...', 'generation_time': 2.18}
    ],
    'summary': {
        'total_images': 2,
        'successful': 2,
        'failed': 0,
        'total_time': 8.60,
        'total_cost': 0.030,
        'success_rate': 100.0
    }
}
```

## Development Guidelines

### When to Use Each Model

**Video Generation:**
- **MiniMax Hailuo-02**: General use, reliable results, prompt optimization
- **Kling Video 2.1**: High-quality, artistic content, fine control

**Avatar Generation:**
- **Text-to-Speech Avatar**: Quick avatar generation with built-in speech synthesis, 20 voice options, official examples
- **Audio-to-Avatar**: Custom audio content, professional voiceovers, existing audio files
- **Multi-Audio Conversation**: Dialogue scenes, interviews, conversation videos, educational content

**Text-to-Image Generation:**
- **Imagen4**: Photorealistic content, portraits, professional images
- **Seedream**: Creative and artistic content, unique aesthetics
- **FLUX Schnell**: Fast iterations, concept development, testing
- **FLUX Dev**: Production content, balanced quality and speed

### Best Practices
- Always check for API key in environment
- Use model-specific methods for optimal results
- Test with free API tests before paid generation
- Consider cost implications of batch operations
- Use appropriate models for content type
- Implement retry logic for network operations
- Cache results to avoid regeneration costs
- Use official examples as starting points for avatar generation
- Validate frame count ranges (81-129 for avatars)
- Provide clear prompts for better avatar expressions

### Common Patterns
- Initialize generator once, reuse for multiple generations
- Use batch generation for A/B testing across models
- Leverage model-specific features (prompt_optimizer, negative_prompts, cfg_scale, voice options)
- Download content locally for offline access
- Use interactive demos for quick experimentation
- Implement direct Python API for programmatic access
- Use official examples for consistent avatar generation results

### Testing Strategy

**Avatar Generation Testing (Cost-Conscious Structure):**
- Use FREE setup tests first (`test_setup.py`)
- Test official examples (`test_official_example.py`) for documentation compliance
- Test individual modes (`test_generation.py --voice Bill`)
- Test specific voices (`test_generation.py --voice [VoiceName]`)
- Test audio modes (`test_generation.py --audio`)
- Test conversation modes (`test_generation.py --multi`)
- Use generation testing with various modes (`test_generation.py`)

**Text-to-Image Testing (Consolidated Structure):**
- Use FREE setup tests first (`test_setup.py`)
- Test API functionality (`test_setup.py`) 
- Test individual models (`test_generation.py --imagen4`)
- Use dragon generation for testing (`test_generation.py --dragon`)
- Test batch operations carefully (`test_generation.py --batch 1,3`)
- Use generation testing with various models (`test_generation.py`)

**Video Generation Testing:**
- Use FREE API tests first (`test_api_only.py`)
- Test individual models before batch operations
- Use model-specific flags to test targeted functionality
- Validate API connection before generation
- Use comprehensive test suites for CI/CD
- Monitor costs carefully during development

### API Integration
- Use direct Python API for programmatic access
- Implement cost-conscious confirmation prompts in applications
- Leverage batch processing for efficient workflows
- Implement proper error handling and validation
- Provide rich metadata in API responses
- Support resource management for generated content
- Use official examples for avatar generation consistency
- Validate input parameters before API calls

