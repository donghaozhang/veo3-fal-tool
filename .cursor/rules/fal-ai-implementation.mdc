---
description: 
globs: 
alwaysApply: true
---
# FAL AI Dual-Model Video Generation Implementation

This document covers the FAL AI video generation implementation supporting two models:
- **MiniMax Hailuo-02**: Reliable 768p generation with prompt optimization
- **Kling Video 2.1**: High-quality generation with CFG scale and negative prompts

Both models provide production-ready API access as an alternative to Google Veo.

## Core Components

### FALVideoGenerator Class
Located in [fal_video_generation/fal_video_generator.py](mdc:fal_video_generation/fal_video_generator.py)

**Dual-Model Support:**
- Single class supports both models
- Model selection via `model` parameter
- Model-specific methods for optimized usage
- Backward compatibility maintained

**Universal Methods:**
```python
# Generate video with model selection
generator.generate_video_from_image(
    prompt="Your description",
    image_url="https://example.com/image.jpg",
    duration="6",  # "5" or "6" or "10" seconds
    model="hailuo",  # "hailuo" or "kling"
    output_folder="output"
)

# Generate video from local image with model selection
generator.generate_video_from_local_image(
    prompt="Your description", 
    image_path="path/to/image.jpg",
    duration="6",
    model="kling"  # Choose model
)
```

**Model-Specific Methods:**
```python
# MiniMax Hailuo-02 optimized method
generator.generate_video_with_hailuo(
    prompt="Your description",
    image_url="https://example.com/image.jpg",
    duration="6",
    prompt_optimizer=True
)

# Kling Video 2.1 optimized method
generator.generate_video_with_kling(
    prompt="Your description",
    image_url="https://example.com/image.jpg",
    duration="5",
    negative_prompt="blur, distort, and low quality",
    cfg_scale=0.5
)
```

**Utility Methods:**
```python
# Upload local image to FAL AI
image_url = generator.upload_local_image("path/to/image.jpg")

# Download video from URL
local_path = generator.download_video(video_url, "output", "filename.mp4")
```

### Cost-Conscious Testing Framework
Enhanced test suite with cost warnings in [fal_video_generation/test_fal_ai.py](mdc:fal_video_generation/test_fal_ai.py)

**FREE Testing Commands (No Cost):**
```bash
# API connection test only - completely FREE
python test_api_only.py

# Basic setup and API connection test - FREE
python test_fal_ai.py
```

**Paid Testing Commands (Generates Real Videos):**
```bash
# Test single model - ~$0.02-0.05 per test
python test_fal_ai.py --hailuo      # Test Hailuo model only
python test_fal_ai.py --kling       # Test Kling model only
python test_fal_ai.py --quick       # Same as --hailuo

# Full test with detailed output - ~$0.02-0.05
python test_fal_ai.py --full

# Compare both models - ~$0.04-0.10 (EXPENSIVE!)
python test_fal_ai.py --compare     # Generates 2 videos
```

**Cost-Conscious Features:**
- Cost warnings displayed prominently
- Confirmation prompts before paid operations
- Model-specific testing to avoid unnecessary costs
- Clear cost estimates for each operation

### Cost-Conscious Interactive Demo
Enhanced demo with cost warnings in [fal_video_generation/demo.py](mdc:fal_video_generation/demo.py)

**Demo Features:**
- **Cost warnings** displayed upfront
- **Confirmation prompts** before each video generation
- Model selection menu with cost estimates
- Online image generation with both models
- Local image generation with both models
- Side-by-side model comparison (with expensive operation warning)
- Custom parameter input for each model

**Cost Safety Features:**
- Upfront cost warnings (~$0.02-0.05 per video)
- Confirmation prompts for all paid operations
- Cost indicators in menu options
- Expensive operations clearly marked

## Configuration

### Environment Setup
FAL AI requires only a simple API key setup in [fal_video_generation/.env](mdc:fal_video_generation/.env):

```bash
# FAL AI API Configuration (works for both models)
FAL_KEY=your_fal_api_key_here

# Optional: Additional configuration
FAL_TIMEOUT=300
FAL_MAX_RETRIES=3
```

### Dependencies
Listed in [fal_video_generation/requirements.txt](mdc:fal_video_generation/requirements.txt):
- fal-client>=0.4.0
- python-dotenv>=1.0.0  
- requests>=2.31.0
- typing-extensions>=4.0.0

## Model Specifications

### MiniMax Hailuo-02
- **Endpoint**: `fal-ai/minimax/hailuo-02/standard/image-to-video`
- **Resolution**: 768p standard
- **Duration**: 6-10 seconds (default: 6)
- **Key Features**: 
  - Prompt optimizer for enhanced descriptions
  - Reliable, consistent output quality
  - Optimized for general use cases

### Kling Video 2.1
- **Endpoint**: `fal-ai/kling-video/v2.1/standard/image-to-video`
- **Resolution**: High-quality (varies by input)
- **Duration**: 5-10 seconds (default: 5)
- **Key Features**:
  - CFG scale parameter (0.1-2.0, default: 0.5)
  - Negative prompt support
  - Enhanced quality control
  - Better for artistic/cinematic content

### Supported Image Formats (Both Models)
- JPEG (.jpg, .jpeg)
- PNG (.png)
- WebP (.webp)
- GIF (.gif)

### Processing Modes
- **Synchronous**: Default mode, waits for completion
- **Asynchronous**: For longer requests, polls for completion

## Usage Patterns

### Model Selection Strategy
```python
from fal_video_generator import FALVideoGenerator

generator = FALVideoGenerator()

# For general use, reliable results
result = generator.generate_video_with_hailuo(
    prompt="A beautiful landscape with moving clouds",
    image_url="https://example.com/image.jpg",
    duration="6",
    prompt_optimizer=True
)

# For high-quality, artistic results
result = generator.generate_video_with_kling(
    prompt="A cinematic landscape with dramatic lighting",
    image_url="https://example.com/image.jpg",
    duration="5",
    cfg_scale=0.7,
    negative_prompt="blur, distort, low quality, artifacts"
)
```

### Universal Interface
```python
# Same interface, different models
hailuo_result = generator.generate_video_from_image(
    prompt="A peaceful scene",
    image_url="https://example.com/image.jpg",
    model="hailuo"
)

kling_result = generator.generate_video_from_image(
    prompt="A peaceful scene",
    image_url="https://example.com/image.jpg",
    model="kling"
)
```

### Model Comparison
```python
# Compare both models with same input
def compare_models(prompt, image_url):
    generator = FALVideoGenerator()
    
    hailuo_result = generator.generate_video_from_image(
        prompt=prompt, image_url=image_url, model="hailuo"
    )
    
    kling_result = generator.generate_video_from_image(
        prompt=prompt, image_url=image_url, model="kling"
    )
    
    return hailuo_result, kling_result
```

### Error Handling
The implementation includes comprehensive error handling:
- API key validation for both endpoints
- Model-specific parameter validation
- Network error recovery
- File upload/download failures
- API response validation

### Output Structure
Generated videos are saved with metadata:
```python
{
    'video': {
        'url': 'https://v3.fal.media/files/...',
        'file_name': 'output.mp4',
        'file_size': 2816883
    },
    'duration': '6',  # or '5' for Kling
    'model': 'hailuo',  # or 'kling'
    'local_path': 'output/video.mp4'
}
```

## Development Guidelines

### When to Use Each Model

**Use MiniMax Hailuo-02 for:**
- General video generation tasks
- When you want prompt optimization
- Reliable, consistent results
- Production workflows requiring stability

**Use Kling Video 2.1 for:**
- High-quality, artistic content
- When you need fine control over generation
- Cinematic or professional video content
- When negative prompts are beneficial

### Best Practices
- Always check for API key in environment
- Use model-specific methods for optimal results
- Test both models during development
- Consider duration differences (Hailuo: 6s, Kling: 5s default)
- Use comparison tools to evaluate output quality
- Implement retry logic for network operations

### Common Patterns
- Initialize generator once, reuse for multiple generations
- Use model parameter for A/B testing
- Leverage model-specific features (prompt_optimizer vs cfg_scale)
- Download videos locally for offline access
- Use the interactive demo for quick experimentation

### Testing Strategy
- Use `--compare` flag to test both models
- Test model-specific parameters separately
- Validate API connection before generation
- Use the comprehensive test suite for CI/CD

