---
description: 
globs: 
alwaysApply: true
---
# FAL AI Multi-Model Implementation

This document covers the FAL AI implementation supporting both video and text-to-image generation:

## Video Generation (Dual-Model Support)
- **MiniMax Hailuo-02**: Reliable 768p generation with prompt optimization
- **Kling Video 2.1**: High-quality generation with CFG scale and negative prompts

## Text-to-Image Generation (Quad-Model Support)
- **Imagen4**: Google's high-quality model with excellent realism
- **Seedream**: Artistic and creative generation with unique style
- **FLUX Schnell**: Ultra-fast generation (1-2 seconds)
- **FLUX Dev**: Balanced speed and quality

Both video and image modules provide production-ready API access with cost-conscious testing frameworks.

## Core Components

### FALVideoGenerator Class
Located in [fal_video_generation/fal_video_generator.py](mdc:fal_video_generation/fal_video_generator.py)

**Dual-Model Support:**
- Single class supports both models
- Model selection via `model` parameter
- Model-specific methods for optimized usage
- Backward compatibility maintained

**Universal Methods:**
```python
# Generate video with model selection
generator.generate_video_from_image(
    prompt="Your description",
    image_url="https://example.com/image.jpg",
    duration="6",  # "5" or "6" or "10" seconds
    model="hailuo",  # "hailuo" or "kling"
    output_folder="output"
)

# Generate video from local image with model selection
generator.generate_video_from_local_image(
    prompt="Your description", 
    image_path="path/to/image.jpg",
    duration="6",
    model="kling"  # Choose model
)
```

### FALTextToImageGenerator Class
Located in [fal_text_to_image/fal_text_to_image_generator.py](mdc:fal_text_to_image/fal_text_to_image_generator.py)

**Quad-Model Support:**
- Single class supports all four models
- Model selection via `model` parameter
- Batch generation with multiple models
- Cost-conscious design with confirmation prompts

**Universal Methods:**
```python
# Generate image with model selection
generator.generate_image(
    prompt="A beautiful landscape",
    model="imagen4",  # "imagen4", "seedream", "flux_schnell", "flux_dev"
    output_folder="output"
)

# Batch generation with multiple models
results = generator.batch_generate(
    prompt="A magical forest",
    models=["imagen4", "flux_schnell"],  # Select specific models
    auto_confirm=False,  # Prompt for cost confirmation
    download_images=True  # Download to local folder
)
```

**Model-Specific Methods:**
```python
# Imagen4 optimized method
generator.generate_image_with_imagen4(
    prompt="Photorealistic portrait",
    negative_prompt="blur, distortion",
    num_inference_steps=50
)

# FLUX Schnell for speed
generator.generate_image_with_flux_schnell(
    prompt="Quick artistic sketch",
    num_inference_steps=4
)
```

**Batch Processing Features:**
- Multi-model batch generation
- Cost estimation and confirmation prompts
- Performance tracking and timing
- Detailed success/failure reporting
- Auto-download option for generated images
- Progress tracking with numbered steps

### Cost-Conscious Testing Framework

**Video Generation Testing:**
Located in [fal_video_generation/test_fal_ai.py](mdc:fal_video_generation/test_fal_ai.py)

**FREE Testing Commands (No Cost):**
```bash
# API connection test only - completely FREE
python test_api_only.py

# Basic setup and API connection test - FREE
python test_fal_ai.py
```

**Paid Testing Commands (Generates Real Videos):**
```bash
# Test single model - ~$0.02-0.05 per test
python test_fal_ai.py --hailuo      # Test Hailuo model only
python test_fal_ai.py --kling       # Test Kling model only
python test_fal_ai.py --quick       # Same as --hailuo

# Full test with detailed output - ~$0.02-0.05
python test_fal_ai.py --full

# Compare both models - ~$0.04-0.10 (EXPENSIVE!)
python test_fal_ai.py --compare     # Generates 2 videos
```

**Text-to-Image Testing:**
Located in [fal_text_to_image/test_text_to_image.py](mdc:fal_text_to_image/test_text_to_image.py)

**FREE Testing Commands (No Cost):**
```bash
# API connection test only - completely FREE
python test_api_only.py

# Basic setup and API connection test - FREE
python test_text_to_image.py
```

**Paid Testing Commands (Generates Real Images):**
```bash
# Test single model - ~$0.015 per test
python test_text_to_image.py --imagen4    # Test Imagen4 only
python test_text_to_image.py --seedream   # Test Seedream only
python test_text_to_image.py --flux_schnell  # Test FLUX Schnell only
python test_text_to_image.py --flux_dev   # Test FLUX Dev only

# Batch test with selected models - cost varies by model count
python test_text_to_image.py --batch 1,3  # Test imagen4 + flux_schnell
python test_text_to_image.py --batch 2,4  # Test seedream + flux_dev

# Full test with all models - ~$0.060 (EXPENSIVE!)
python test_text_to_image.py --all        # Generates 4 images
```

**Cost-Conscious Features:**
- Cost warnings displayed prominently
- Confirmation prompts before paid operations
- Model-specific testing to avoid unnecessary costs
- Clear cost estimates for each operation
- Batch testing with selective model combinations

### Interactive Demos

**Video Generation Demo:**
Located in [fal_video_generation/demo.py](mdc:fal_video_generation/demo.py)
- Cost warnings and confirmation prompts
- Model selection menu with cost estimates
- Side-by-side model comparison (with expensive operation warning)

**Text-to-Image Demo:**
Located in [fal_text_to_image/demo.py](mdc:fal_text_to_image/demo.py)
- Interactive model selection
- Batch generation with model picker
- Cost estimation and confirmation
- Detailed results display with timing
- Support for negative prompts and custom parameters

## MCP Server Implementation

### FAL AI Text-to-Image MCP Server
A Model Context Protocol (MCP) server that provides Claude and other AI assistants with access to FAL AI text-to-image generation capabilities.

**Core MCP Tools:**
1. **`generate_image`** - Generate single image with specified model
2. **`batch_generate_images`** - Generate images with multiple models
3. **`list_models`** - Get available models and specifications
4. **`download_image`** - Download generated image to local storage
5. **`get_model_info`** - Get detailed information about specific model

**MCP Server Features:**
- Cost-conscious design with cost warnings
- Rich response formatting with metadata
- Support for all four models (imagen4, seedream, flux_schnell, flux_dev)
- Batch processing capabilities
- Error handling and validation
- Resource support for generated images

**Installation and Setup:**
```bash
# Install MCP server dependencies
pip install mcp>=1.0.0 httpx>=0.25.0

# Create MCP server configuration
# Add to Claude Desktop settings or other MCP clients
```

**MCP Tool Usage Examples:**
```python
# Generate single image
await generate_image(
    prompt="A serene mountain landscape",
    model="imagen4",
    negative_prompt="blur, artifacts"
)

# Batch generate with multiple models
await batch_generate_images(
    prompt="A futuristic cityscape",
    models=["imagen4", "flux_dev"],
    confirm_cost=True
)

# Get model information
await get_model_info(model="flux_schnell")
```

## Configuration

### Environment Setup
FAL AI requires only a simple API key setup:

**Video Generation:** [fal_video_generation/.env](mdc:fal_video_generation/.env)
**Text-to-Image:** [fal_text_to_image/.env](mdc:fal_text_to_image/.env)

```bash
# FAL AI API Configuration (works for all models)
FAL_KEY=your_fal_api_key_here

# Optional: Additional configuration
FAL_TIMEOUT=300
FAL_MAX_RETRIES=3
```

### Dependencies

**Video Generation:** [fal_video_generation/requirements.txt](mdc:fal_video_generation/requirements.txt)
**Text-to-Image:** [fal_text_to_image/requirements.txt](mdc:fal_text_to_image/requirements.txt)

Core dependencies:
- fal-client>=0.4.0
- python-dotenv>=1.0.0  
- requests>=2.31.0
- typing-extensions>=4.0.0

MCP Server additional dependencies:
- mcp>=1.0.0
- httpx>=0.25.0

## Model Specifications

### Video Generation Models

**MiniMax Hailuo-02:**
- **Endpoint**: `fal-ai/minimax/hailuo-02/standard/image-to-video`
- **Resolution**: 768p standard
- **Duration**: 6-10 seconds (default: 6)
- **Cost**: ~$0.02-0.05 per video
- **Key Features**: Prompt optimizer, reliable output

**Kling Video 2.1:**
- **Endpoint**: `fal-ai/kling-video/v2.1/standard/image-to-video`
- **Resolution**: High-quality (varies by input)
- **Duration**: 5-10 seconds (default: 5)
- **Cost**: ~$0.02-0.05 per video
- **Key Features**: CFG scale, negative prompts, enhanced quality

### Text-to-Image Models

**Imagen4:**
- **Endpoint**: `fal-ai/google/imagen4/text-to-image`
- **Resolution**: High-quality (1024x1024 default)
- **Speed**: ~6-8 seconds
- **Cost**: ~$0.015 per image
- **Key Features**: Photorealistic results, excellent for portraits

**Seedream:**
- **Endpoint**: `fal-ai/seedream/text-to-image`
- **Resolution**: Artistic quality (varies)
- **Speed**: ~9-15 seconds
- **Cost**: ~$0.015 per image
- **Key Features**: Creative and artistic style, unique aesthetics

**FLUX Schnell:**
- **Endpoint**: `fal-ai/flux/schnell`
- **Resolution**: Good quality (1024x1024 default)
- **Speed**: ~1-2 seconds (fastest)
- **Cost**: ~$0.015 per image
- **Key Features**: Ultra-fast generation, good for iterations

**FLUX Dev:**
- **Endpoint**: `fal-ai/flux/dev`
- **Resolution**: High quality (1024x1024 default)
- **Speed**: ~2-3 seconds
- **Cost**: ~$0.015 per image
- **Key Features**: Balanced speed and quality, good for production

### Supported Formats
- **Input**: Text prompts, negative prompts (text-to-image)
- **Input**: Images + prompts (video generation)
- **Output**: JPEG, PNG, WebP (images), MP4 (videos)

## Usage Patterns

### Model Selection Strategy

**For Video Generation:**
```python
# For general use, reliable results
result = generator.generate_video_with_hailuo(
    prompt="A beautiful landscape with moving clouds",
    image_url="https://example.com/image.jpg",
    duration="6",
    prompt_optimizer=True
)

# For high-quality, artistic results
result = generator.generate_video_with_kling(
    prompt="A cinematic landscape with dramatic lighting",
    image_url="https://example.com/image.jpg",
    duration="5",
    cfg_scale=0.7,
    negative_prompt="blur, distort, low quality, artifacts"
)
```

**For Text-to-Image Generation:**
```python
# For photorealistic images
result = generator.generate_image_with_imagen4(
    prompt="A professional headshot photo",
    negative_prompt="blur, distortion, artifacts"
)

# For creative/artistic images
result = generator.generate_image_with_seedream(
    prompt="An abstract digital art piece",
    style="artistic"
)

# For fast iterations
result = generator.generate_image_with_flux_schnell(
    prompt="A quick concept sketch",
    num_inference_steps=4
)

# For production quality
result = generator.generate_image_with_flux_dev(
    prompt="A detailed product visualization",
    num_inference_steps=50
)
```

### Batch Processing
```python
# Generate with multiple models for comparison
results = generator.batch_generate(
    prompt="A futuristic city skyline",
    models=["imagen4", "flux_dev"],  # Select best models
    auto_confirm=False,  # Ask for cost confirmation
    download_images=True  # Save locally
)

# Process results
for result in results:
    print(f"Model: {result['model']}")
    print(f"Success: {result['success']}")
    print(f"Time: {result['generation_time']:.2f}s")
    if result['success']:
        print(f"Image URL: {result['image_url']}")
        print(f"Local path: {result['local_path']}")
```

### Error Handling
Both implementations include comprehensive error handling:
- API key validation for all endpoints
- Model-specific parameter validation
- Network error recovery
- File upload/download failures
- API response validation
- Cost estimation and confirmation

### Output Structure

**Video Generation:**
```python
{
    'video': {
        'url': 'https://v3.fal.media/files/...',
        'file_name': 'output.mp4',
        'file_size': 2816883
    },
    'duration': '6',  # or '5' for Kling
    'model': 'hailuo',  # or 'kling'
    'local_path': 'output/video.mp4'
}
```

**Text-to-Image Generation:**
```python
{
    'image': {
        'url': 'https://v3.fal.media/files/...',
        'file_name': 'output.png',
        'file_size': 1024768
    },
    'model': 'imagen4',  # or other model
    'local_path': 'output/image.png',
    'generation_time': 6.42,
    'cost_estimate': 0.015
}
```

**Batch Generation:**
```python
{
    'results': [
        {'model': 'imagen4', 'success': True, 'image_url': '...', 'generation_time': 6.42},
        {'model': 'flux_dev', 'success': True, 'image_url': '...', 'generation_time': 2.18}
    ],
    'summary': {
        'total_images': 2,
        'successful': 2,
        'failed': 0,
        'total_time': 8.60,
        'total_cost': 0.030,
        'success_rate': 100.0
    }
}
```

## Development Guidelines

### When to Use Each Model

**Video Generation:**
- **MiniMax Hailuo-02**: General use, reliable results, prompt optimization
- **Kling Video 2.1**: High-quality, artistic content, fine control

**Text-to-Image Generation:**
- **Imagen4**: Photorealistic content, portraits, professional images
- **Seedream**: Creative and artistic content, unique aesthetics
- **FLUX Schnell**: Fast iterations, concept development, testing
- **FLUX Dev**: Production content, balanced quality and speed

### Best Practices
- Always check for API key in environment
- Use model-specific methods for optimal results
- Test with free API tests before paid generation
- Consider cost implications of batch operations
- Use appropriate models for content type
- Implement retry logic for network operations
- Cache results to avoid regeneration costs

### Common Patterns
- Initialize generator once, reuse for multiple generations
- Use batch generation for A/B testing across models
- Leverage model-specific features (prompt_optimizer, negative_prompts, cfg_scale)
- Download content locally for offline access
- Use interactive demos for quick experimentation
- Implement MCP server for AI assistant integration

### Testing Strategy
- Use FREE API tests first (`test_api_only.py`)
- Test individual models before batch operations
- Use model-specific flags to test targeted functionality
- Validate API connection before generation
- Use comprehensive test suites for CI/CD
- Monitor costs carefully during development

### MCP Server Integration
- Deploy MCP server for AI assistant access
- Use cost-conscious MCP tools with confirmation prompts
- Leverage batch processing for efficient AI workflows
- Implement proper error handling and validation
- Provide rich metadata in MCP responses
- Support resource management for generated content

