---
description: 
globs: 
alwaysApply: false
---
# Setup and Configuration Guide

This project offers two video generation options with different setup complexity levels:

## FAL AI Setup (Recommended for Quick Start)

### 1. FAL AI Dependencies
```bash
cd fal_video_generation
pip install -r requirements.txt
```

Key packages:
- `fal-client>=0.4.0` - FAL AI SDK
- `python-dotenv>=1.0.0` - Environment management
- `requests>=2.31.0` - HTTP client

### 2. FAL AI Configuration
Create [fal_video_generation/.env](mdc:fal_video_generation/.env):
```bash
# FAL AI API Configuration
FAL_KEY=your_fal_api_key_here

# Optional: Additional configuration
FAL_TIMEOUT=300
FAL_MAX_RETRIES=3
```

### 3. FAL AI Testing

⚠️ **Cost Warning**: Video generation costs money! Always start with FREE tests.

#### FREE Testing (No Costs)
```bash
cd fal_video_generation
python test_api_only.py        # Completely FREE API connection test
python test_fal_ai.py          # FREE setup test (no video generation)
```

#### Paid Testing (Generates Real Videos)
```bash
python test_fal_ai.py --hailuo # Test Hailuo model (~$0.02-0.05)
python test_fal_ai.py --kling  # Test Kling model (~$0.02-0.05)
```

### 4. FAL AI Usage
```bash
python demo.py  # Interactive demonstration
```

## Google Veo Setup (Advanced)

### 1. Google Cloud Dependencies
```bash
pip install -r requirements.txt
```

Key packages from [requirements.txt](mdc:requirements.txt):
- `google-genai` - Core GenAI SDK
- `google-cloud-aiplatform` - Vertex AI integration
- `google-cloud-storage` - GCS operations

### 2. Google Cloud Environment Configuration
Configure your API keys and settings in [.env](mdc:.env):
```bash
# Google Cloud settings (required)
GOOGLE_CLOUD_PROJECT=your-project-id
GOOGLE_API_KEY=your-google-api-key
GOOGLE_APPLICATION_CREDENTIALS=service-account-key.json

# Optional: Additional AI service API keys
ANTHROPIC_API_KEY=your-anthropic-key
OPENAI_API_KEY=your-openai-key
GEMINI_API_KEY=your-gemini-key
```

### 3. Google Cloud Authentication
```bash
# Login and set up credentials
gcloud auth login your-email@gmail.com
gcloud auth application-default login
gcloud config set project your-project-id
```

### 4. Storage Permissions (Veo 2.0)
```bash
# Grant permissions to Veo service account
gcloud storage buckets add-iam-policy-binding gs://your-bucket \
  --member="user:cloud-lvm-video-server@prod.google.com" \
  --role=roles/storage.objectCreator

gcloud storage buckets add-iam-policy-binding gs://your-bucket \
  --member="user:cloud-lvm-video-server@prod.google.com" \
  --role=roles/storage.objectAdmin
```

### 5. Google Veo Project Configuration
The project is pre-configured with:
- **Sample images**: Available in [images/](mdc:images) directory
- **Output folder**: [result_folder/](mdc:result_folder) for downloaded videos
- **Archive**: [archive/](mdc:archive) contains legacy tools and alternative implementations

Edit [veo_video_generation.py](mdc:veo_video_generation.py) to customize:
```python
PROJECT_ID = "your-project-id"  # Or use from .env
OUTPUT_BUCKET_PATH = "gs://your-bucket/veo_output/"
```

## Platform Comparison

### FAL AI (Simple Setup)
✅ **Pros:**
- Single API key setup
- Production ready
- No cloud infrastructure needed
- Quick testing with unified test suite

❌ **Cons:**
- 768p resolution limit
- Shorter video duration options

### Google Veo (Advanced Setup)
✅ **Pros:**
- Higher resolution (up to 1080p)
- Longer video duration support
- Enterprise-grade infrastructure

❌ **Cons:**
- Complex Google Cloud setup
- Requires GCS bucket configuration
- More authentication steps

## Model Versions

### FAL AI Models
- **MiniMax Hailuo-02**: `fal-ai/minimax/hailuo-02/standard/image-to-video`
- **Resolution**: 768p standard
- **Duration**: 6-10 seconds

### Google Veo Models
- **Veo 2.0**: `veo-2.0-generate-001` (generally available)
- **Veo 3.0**: `veo-3.0-generate-preview` (requires allowlist access)

## Directory Structure
```
veo3/
├── veo_video_generation.py          # Google Veo implementation
├── .env                             # Google Cloud configuration
├── requirements.txt                 # Main dependencies
├── images/                          # Input images for Google Veo
├── result_folder/                   # Google Veo output videos
├── archive/                         # Legacy tools
└── fal_video_generation/            # FAL AI implementation
    ├── fal_video_generator.py       # FAL AI main class
    ├── demo.py                      # Interactive demo
    ├── test_fal_ai.py              # Unified test suite
    ├── .env                         # FAL AI configuration
    └── output/                      # FAL AI generated videos
```

## Testing Both Platforms

### FAL AI Testing

⚠️ **Cost Warning**: Video generation costs money!

```bash
cd fal_video_generation
# FREE Tests
python test_api_only.py        # Completely FREE API connection test
python test_fal_ai.py          # FREE setup test (no video generation)

# Paid Tests (generates real videos)
python test_fal_ai.py --hailuo # Test Hailuo model (~$0.02-0.05)
python demo.py                 # Interactive demo (with cost warnings)
```

### Google Veo Testing
Test functions individually in [veo_video_generation.py](mdc:veo_video_generation.py) with proper GCP authentication.

## Common Configuration Issues

### FAL AI Issues
1. **Invalid API Key**: Check FAL_KEY in [fal_video_generation/.env](mdc:fal_video_generation/.env)
2. **Network Errors**: Verify internet connection and FAL AI service status
3. **File Upload Failures**: Check image file format and size limits

### Google Veo Issues
1. **Permission Denied**: Check storage bucket permissions
2. **Project Not Allowlisted**: Switch to Veo 2.0 or request access
3. **Authentication Errors**: Verify `gcloud auth list` shows correct account
4. **Region Issues**: Ensure `us-central1` region is used for Vertex AI
5. **Missing API Keys**: Check [.env](mdc:.env) file configuration

## Environment Variables

### FAL AI Environment
- `FAL_KEY` - API key for FAL AI service
- `FAL_TIMEOUT` - Request timeout (optional)
- `FAL_MAX_RETRIES` - Retry attempts (optional)

### Google Veo Environment
- `GOOGLE_CLOUD_PROJECT`
- `GOOGLE_CLOUD_LOCATION` 
- `GOOGLE_GENAI_USE_VERTEXAI`
- `GOOGLE_APPLICATION_CREDENTIALS`


